# -*- coding: utf-8 -*-
"""CM methods2021_stats_I_practical_and_homework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2NsB9HDLsKlmOJpbTo4OlZNXl9WCgUr

# Methods 2021
## Stats I: Intro

Some nifty Python stats

Grant Hussey

# Imports
"""

from scipy import stats
import numpy as np
from sklearn import datasets
import pandas as pd

from matplotlib import pyplot as plt
import seaborn as sns

"""# Part I: Distributions

Randomly sample from an existing normal distribution
"""

# Using np.random module
# np.random.normal(loc=0, scale=1, size=1000)

# Using stats.norm.rvs()
# stats.norm.rvs(loc=0, scale=1, size=1000)

# Plot that list of normally distributed numbers
# We use a histogram for this

# Adjust size
# Adjust bins
# Adjust loc, adjust scale

# plt.hist(np.random.normal(loc=0, scale=1, size=5000000), bins=50);

"""# Running T-tests"""

# stats.ttest_ind()

"""# Homework

***Question 1***

Create four samples of normally distributed numbers with `size` of 10, 50, 100, and 10,000.

Plot each of them with the proper amount of bins. At what size does the normal histogram begin looking "normal"?
"""

from scipy.stats import norm

np.random.seed(100)
np_hist = np.random.normal(loc=0, scale=1, size=10)
hist,bin_edges = np.histogram(np_hist)

hist
bin_edges
plt.figure(figsize=[10,8])

plt.bar(bin_edges[:-1], hist, width = 0.5, color='#0504aa',alpha=0.7)
plt.xlim(min(bin_edges), max(bin_edges))
plt.grid(axis='y', alpha=0.75)
plt.xlabel('Value',fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.title('Normal Distribution Histogram',fontsize=15)
plt.show

np.random.seed(100)
np_hist = np.random.normal(loc=0, scale=1, size=50)
hist,bin_edges = np.histogram(np_hist)

hist
bin_edges
plt.figure(figsize=[10,8])
plt.bar(bin_edges[:-1], hist, width = 0.5, color='#0504aa',alpha=0.7)
plt.xlim(min(bin_edges), max(bin_edges))
plt.grid(axis='y', alpha=0.75)
plt.xlabel('Value',fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.title('Normal Distribution Histogram',fontsize=15)
plt.show

np.random.seed(100)
np_hist = np.random.normal(loc=0, scale=1, size=100)
hist,bin_edges = np.histogram(np_hist)

hist
bin_edges
plt.figure(figsize=[10,8])
plt.bar(bin_edges[:-1], hist, width = 0.5, color='#0504aa',alpha=0.7)
plt.xlim(min(bin_edges), max(bin_edges))
plt.grid(axis='y', alpha=0.75)
plt.xlabel('Value',fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.title('Normal Distribution Histogram',fontsize=15)
plt.show

np.random.seed(100)
np_hist = np.random.normal(loc=0, scale=1, size=10000)
hist,bin_edges = np.histogram(np_hist)

hist
bin_edges
plt.figure(figsize=[10,8])
plt.bar(bin_edges[:-1], hist, width = 0.5, color='#0504aa',alpha=0.7)
plt.xlim(min(bin_edges), max(bin_edges))
plt.grid(axis='y', alpha=0.75)
plt.xlabel('Value',fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.ylabel('Frequency',fontsize=15)
plt.title('Normal Distribution Histogram',fontsize=15)
plt.show

"""histogram begins looking noramal at 100"""



"""***Question 2***

Use the iris dataset below. It is a dataset of the geometry of certain flower species. Sepal length, sepal width, petal length, and petal width are recorded for **TWO** species.

Assume that this dataset was sent to you and you were asked to determine from it alone if the species were actually different flower shapes.

1. Is each "feature" of the data (each measurement type) normally distributed? i.e., does it look normally distributed?


**FOR EACH FEATURE, FOR EACH SPECIES (total of 8 plots):**
* Plot a histogram of the observed data.
* Calculate mean and stdev using np.mean() and np.std()
* Use the observed mean and stdev to plot a normal curve with those parameters on top of the histogram of observed values.
* Use your best judgement. Do they seem normally-distributed?

2. Using T-tests, see if the geometric differences in the two flower species are "statistical significance". Do you believe these measaurements were't just done by a very tired grad student measuring the exact same flower?
"""

# Load the dataset
iris = datasets.load_iris()

df = (
    pd.DataFrame(iris["data"], columns=iris["feature_names"])
    .join(
        pd.DataFrame(iris["target"], columns=["species"]).replace(
            dict(zip(range(3), iris["target_names"]))
        )
    )
    .query("species == 'setosa' or species == 'virginica'")
)

df

fig = plt.figure(figsize = (8,8))
ax = fig.gca()
df.hist(ax=ax)
plt.show()

"""only the sepal widhth appears normally distributed"""

mean=df.mean()
mean

sd=df.std()
sd

df

print(df.columns)

plt.hist(df['sepal length (cm)'], 
         alpha=0.5, 
         label='sepal_width',
         color='red') # customized color parameter
  
plt.hist(df['sepal width (cm)'], 
         alpha=0.5,
         label='petal_width',
         color='green')
  
plt.hist(df['petal length (cm)'], 
         alpha=0.5,
         label='petal_length',
         color='yellow')
  
plt.hist(df['petal width (cm)'], 
         alpha=0.5,
         label='sepal_length',
         color='purple')
  
plt.legend(loc='upper right')
plt.show()



(mu, sigma) = norm.fit(df['sepal width (cm)'])
plt.figure(figsize = (10, 7))
x = df['sepal width (cm)']
plt.hist(x, bins = 20, color = "green")
plt.title("Sepal Width in cm")
plt.xlabel("Sepal_Width_cm")
plt.ylabel("Count")
  
plt.show()

"""mean is 3 and st. dev .4"""

stats.shapiro(df['sepal length (cm)'])

num_bins = 50

fig, ax = plt.subplots()

# the histogram of the data
n, bins, patches = ax.hist(x, num_bins, density=1)

# add a 'best fit' line
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('sepal width in cm')
ax.set_ylabel('count')
ax.set_title(r'Sepal Width in cm')

# Tweak spacing to prevent clipping of ylabel
fig.tight_layout()
plt.show()

"""mean is 3 and st. dev .4"""

stats.shapiro(df['sepal width (cm)'])

(mu, sigma) = norm.fit(df['sepal length (cm)'])
plt.figure(figsize = (10, 7))
x = df['sepal length (cm)']
plt.hist(x, bins = 20, color = "green")
plt.title("Sepal length in cm")
plt.xlabel("Sepal_length_cm")
plt.ylabel("Count")
  
plt.show()

num_bins = 50

fig, ax = plt.subplots()

# the histogram of the data
n, bins, patches = ax.hist(x, num_bins, density=1)

# add a 'best fit' line
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('sepal length in cm')
ax.set_ylabel('count')
ax.set_title(r'Sepal Length in cm')

# Tweak spacing to prevent clipping of ylabel
fig.tight_layout()
plt.show()

"""mean is 5.78, sd= .9"""

stats.shapiro(df['sepal length (cm)'])

(mu, sigma) = norm.fit(df['petal length (cm)'])
plt.figure(figsize = (10, 7))
x = df['petal length (cm)']
plt.hist(x, bins = 20, color = "green")
plt.title('petal length (cm)')
plt.xlabel('petal length (cm)')
plt.ylabel("Count")
  
plt.show()
num_bins = 50

fig, ax = plt.subplots()

# the histogram of the data
n, bins, patches = ax.hist(x, num_bins, density=1)

# add a 'best fit' line
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('petal length (cm)')

ax.set_ylabel('count')
ax.set_title(r'petal length (cm)')

# Tweak spacing to prevent clipping of ylabel
fig.tight_layout()
plt.show()

stats.shapiro(df['petal length (cm)'])

(mu, sigma) = norm.fit(df['petal width (cm)'])
plt.figure(figsize = (10, 7))
x = df['petal width (cm)']
plt.hist(x, bins = 20, color = "green")
plt.title('petal width (cm)')
plt.xlabel('petal width (cm)')
plt.ylabel("Count")
  
plt.show()
num_bins = 50

fig, ax = plt.subplots()

# the histogram of the data
n, bins, patches = ax.hist(x, num_bins, density=1)

# add a 'best fit' line
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('petal width (cm)')

ax.set_ylabel('count')
ax.set_title(r'petal width (cm)')

# Tweak spacing to prevent clipping of ylabel
fig.tight_layout()
plt.show()

stats.shapiro(df['petal length (cm)'])

"""it is difficult for me to tell by looking if these are symetrical with respect to values above and below the mean, shapiro wilks test shows all are except sepal width"""

setosa=df.loc[df["species"]=="setosa"]

virginica=df.loc[df["species"]=="virginica"]

stats.ttest_ind(setosa['sepal width (cm)'], virginica['sepal width (cm)'])

stats.ttest_ind(setosa['sepal length (cm)'], virginica['sepal length (cm)'])

stats.ttest_ind(setosa['petal width (cm)'], virginica['petal width (cm)'])

stats.ttest_ind(setosa['petal length (cm)'], virginica['petal length (cm)'])

virginica.describe()

setosa.describe()

"""There are no statistically significant differences between setosa and virginica sepal and petal parameters. Looking at images, they do seem simialar but perhaps a larger sample size would show more significant differences. """



